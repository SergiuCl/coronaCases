from flask import Flask, flash, jsonify, redirect, render_template, request, session
from cs50 import SQL
from newsapi import NewsApiClient
from apscheduler.schedulers.background import BackgroundScheduler
import requests
import http.client
import json
import time, threading

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///coronaDatabase.db")

@app.route("/")
def Index():
    #newsapi = NewsApiClient(api_key="294144d60dcf4795bfb855aa697cb6bd")
    # get a news API
    newsapi = NewsApiClient(api_key="ac881b4ffacf4b37a3d574832e6653c5")
    # get the top headlines from API
    topheadlines = newsapi.get_top_headlines(q='corona', language='de', country="at")

    # save the articles variables
    articles = topheadlines['articles']
    desc = []
    news = []
    img = []

    for i in range(len(articles)):
        myarticles = articles[i]

        news.append(myarticles['title'])
        desc.append(myarticles['description'])
        img.append(myarticles['urlToImage'])

    mylist = zip(news, desc, img)

    return render_template('index.html', context = mylist)



@app.route("/casesInAustria")
def casesInAustria():

    tableValues = {}
    tableValues = db.execute("SELECT * FROM casesInAustria")

    return render_template('casesInAustria.html', 
    country=tableValues[0]['country'], 
    activeCases = tableValues[0]['activeCases'], 
    newCases = tableValues[0]['newCases'], 
    newDeaths = tableValues[0]['newDeaths'], 
    totalCases = tableValues[0]['totalCases'], 
    totalDeaths = tableValues[0]['totalDeaths'], 
    totalRecovered = tableValues[0]['totalRecovered'], 
    lastUpdate = tableValues[0]['lastUpdate'])



def scheduled_task():
    # HTTP Client Corona URL
    conn = http.client.HTTPSConnection("covid-19-tracking.p.rapidapi.com")

    # set headers
    headers = {
        'x-rapidapi-host': "covid-19-tracking.p.rapidapi.com",
        'x-rapidapi-key': "a3319b5d01msh92069bd8db5f8d8p170d8bjsnc4e22ecc8609"
    }

    # get the cases from Austria
    conn.request("GET", "/v1/austria", headers=headers)
    res = conn.getresponse()
    data = res.read()
    
    # load the data in JSON
    casesAustria = json.loads(data)

    # select query din baza de date - compara totalCases curent cu totalCases nou - daca e diferit, fa update
    # functii pentru select si update query - apelez cu parametru casesAustria

    # update the table casesInAustria
    db.execute("""UPDATE casesInAustria 
                    SET country = :countryName, 
                    activeCases = :activeCases, 
                    newCases = :newCases, 
                    newDeaths = :newDeaths, 
                    totalCases = :totalCases, 
                    totalDeaths = :totalDeaths, 
                    totalRecovered = :totalRecovered, 
                    lastUpdate = :lastUpdate""", 
    
        countryName=casesAustria['Country_text'], 
        activeCases=casesAustria['Active Cases_text'], 
        newCases=casesAustria['New Cases_text'], 
        newDeaths=casesAustria['New Deaths_text'], 
        totalCases=casesAustria['Total Cases_text'], 
        totalDeaths=casesAustria['Total Deaths_text'], 
        totalRecovered=casesAustria['Total Recovered_text'], 
        lastUpdate=casesAustria['Last Update'])

    print("It's working...........................")


# set a background scheduler
scheduler = BackgroundScheduler()
# set a scheduler with interval 3 minute    
job = scheduler.add_job(scheduled_task, 'interval', minutes=1)
# start the scheduler
scheduler.start()

if __name__ == "__main__":
    app.run(debug=True)