from flask import Flask, flash, jsonify, redirect, render_template, request, session
from cs50 import SQL
from newsapi import NewsApiClient
import requests
import http.client
import json


# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///coronaDatabase.db")

def get_cases_austria():
    # HTTP Client Corona URL
    conn = http.client.HTTPSConnection("covid-19-tracking.p.rapidapi.com")

    # set headers
    headers = {
        'x-rapidapi-host': "covid-19-tracking.p.rapidapi.com",
        'x-rapidapi-key': "a3319b5d01msh92069bd8db5f8d8p170d8bjsnc4e22ecc8609"
    }

    # get the cases from Austria
    conn.request("GET", "/v1/austria", headers=headers)
    res = conn.getresponse()
    data = res.read()
    
    # load the data in JSON
    casesAustria = json.loads(data)

    # call the function to update table
    update_cases_austria(casesAustria)


def get_cases_world():

    # HTTP Client Corona URL
    conn = http.client.HTTPSConnection("covid-19-tracking.p.rapidapi.com")
    
    # set headers
    headers = {
        'x-rapidapi-host': "covid-19-tracking.p.rapidapi.com",
        'x-rapidapi-key': "a3319b5d01msh92069bd8db5f8d8p170d8bjsnc4e22ecc8609"
        }

    conn.request("GET", "/v1", headers=headers)
    res = conn.getresponse()
    data = res.read()

    # load the data in JSON
    casesWorld = json.loads(data)
    update_cases_world(casesWorld)
    



def update_cases_austria(JSONcases):

    tblValues = {}
    # set the name of the table for query
    # get the values from table
    tblCasesInAustria = "casesInAustria"
    tblValues = select_cases(tblCasesInAustria) 

    # ensure dict is not None
    # if the value did not change, exit function
    # else, update the table
    if (tblValues[0]['totalCases']) is not None:
        if tblValues[0]['totalCases'] == JSONcases['Total Cases_text']:
            update_query_cases_austria(tblCasesInAustria, JSONcases)
            print("It's working...........................")
            return
        else:
            # update the table casesInAustria
            db.execute("""UPDATE casesInAustria 
                            SET country = :countryName, 
                            activeCases = :activeCases, 
                            newCases = :newCases, 
                            newDeaths = :newDeaths, 
                            totalCases = :totalCases, 
                            totalDeaths = :totalDeaths, 
                            totalRecovered = :totalRecovered, 
                            lastUpdate = :lastUpdate""", 
            
                countryName=JSONcases['Country_text'], 
                activeCases=JSONcases['Active Cases_text'], 
                newCases=JSONcases['New Cases_text'], 
                newDeaths=JSONcases['New Deaths_text'], 
                totalCases=JSONcases['Total Cases_text'], 
                totalDeaths=JSONcases['Total Deaths_text'], 
                totalRecovered=JSONcases['Total Recovered_text'], 
                lastUpdate=JSONcases['Last Update'])
    


def update_query_cases_austria(tableName, APIData):
    JSONcases = APIData
    # update the table casesInAustria
    db.execute("""UPDATE casesInAustria
                    SET country = :countryName, 
                    activeCases = :activeCases, 
                    newCases = :newCases, 
                    newDeaths = :newDeaths, 
                    totalCases = :totalCases, 
                    totalDeaths = :totalDeaths, 
                    totalRecovered = :totalRecovered, 
                    lastUpdate = :lastUpdate""",

        countryName=JSONcases['Country_text'], 
        activeCases=JSONcases['Active Cases_text'], 
        newCases=JSONcases['New Cases_text'], 
        newDeaths=JSONcases['New Deaths_text'], 
        totalCases=JSONcases['Total Cases_text'], 
        totalDeaths=JSONcases['Total Deaths_text'], 
        totalRecovered=JSONcases['Total Recovered_text'], 
        lastUpdate=JSONcases['Last Update'])


def update_cases_world(JSONcases):
    return

    #tblValues = 

def select_cases(tableName):

    # make a select query and save the result in result
    result = db.execute("SELECT * FROM :tableName", tableName=tableName)
    return result

def select_cases_condition(tableName, condition):

    # make a select query and save the result in result
    result = db.execute("SELECT * FROM :tableName WHERE country=:condition", tableName=tableName, condition=condition)
    return result